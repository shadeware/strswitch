#include <hayai.hpp>
#include <frozen/unordered_map.h>
#include <frozen/map.h>
#include <frozen/string.h>

using namespace frozen::string_literals;

constexpr frozen::unordered_map<frozen::string, int, @BENCHMARK_N@ + 1> frozen_map
{
  @frozen_map@
};

static int thousand_cases(const std::string& str)
{
  auto it = frozen_map.find(str);
  if (it == frozen_map.end())
    return -1;
  else
    return it->second;
}

BENCHMARK(benchmark, frozen, 10, 1000)
{
  const char* benchmark_strings[] = {@benchmark_strings@ ""};
  for (unsigned int i = 0; i <= @BENCHMARK_N@; ++i)
    if (thousand_cases(benchmark_strings[i]) != i)
      throw std::logic_error(std::to_string(i) + " was expected; got " + std::to_string(thousand_cases(std::to_string(i))));
}

int main()
{
  // check correctness
  if (thousand_cases("-1") != -1)
    throw std::logic_error("-1 was expected; got " + std::to_string(thousand_cases("-1")));
  if (thousand_cases("-2") != -1)
    throw std::logic_error("-1 was expected; got " + std::to_string(thousand_cases("-2")));
  if (thousand_cases(std::to_string(@BENCHMARK_N@ + 1)) != -1)
    throw std::logic_error("-1 was expected; got " + std::to_string(thousand_cases(std::to_string(@BENCHMARK_N@ + 1))));

  hayai::ConsoleOutputter consoleOutputter;

  hayai::Benchmarker::AddOutputter(consoleOutputter);
  hayai::Benchmarker::RunAllTests();
}
